/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen_1_screen/Screen_1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <images/BitmapDatabase.hpp>

Screen_1ViewBase::Screen_1ViewBase() :
    buttonCallback(this, &Screen_1ViewBase::buttonCallbackHandler)
{
    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    textArea1.setXY(191, 126);
    textArea1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textArea1.setLinespacing(0);
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HGQ2));
    add(textArea1);

    button3.setXY(420, 212);
    button3.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_PRESSED_ID));
    button3.setAction(buttonCallback);
    add(button3);

    button2.setXY(420, 106);
    button2.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_PRESSED_ID));
    button2.setAction(buttonCallback);
    add(button2);

    button1.setXY(420, 0);
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_PRESSED_ID));
    button1.setAction(buttonCallback);
    add(button1);
}

Screen_1ViewBase::~Screen_1ViewBase()
{

}

void Screen_1ViewBase::setupScreen()
{

}

void Screen_1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button2)
    {
        //button2Handler
        //When button2 clicked execute C++ code
        //Execute C++ code
        ButtonHandlerTemp.buttonPointer = "BUTTON2";
    }
    if (&src == &button3)
    {
        //button3Handler
        //When button3 clicked execute C++ code
        //Execute C++ code
        ButtonHandlerTemp.buttonPointer = "BUTTON3";
    }
    if (&src == &button1)
    {
        //button1Handler
        //When button1 clicked execute C++ code
        //Execute C++ code
        ButtonHandlerTemp.buttonPointer = "BUTTON1";
    }
}

void Screen_1ViewBase::handleTickEvent()
{
    //buttonHandler
    //When every N tick call virtual function
    //Call buttonHandler
    buttonHandler();
}
